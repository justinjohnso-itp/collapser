{
  "scopeName": "text.quant",
  "patterns": [
    { "include": "#comments" },
    { "include": "#control_sequences" },
    { "include": "#curly_blocks" },
    { "include": "#dollar_macro_invocation" },
    { "include": "#line_breaks" },
    { "include": "#em_dash" },
    { "include": "#variables_standalone" }
  ],
  "repository": {
    "comments": {
      "name": "comment.line.number-sign.quant",
      "match": "^#.*$"
    },
    "line_breaks": {
      "name": "constant.character.escape.line-break.quant",
      "match": "\\\\$"
    },
    "em_dash": {
      "name": "punctuation.definition.thematic-break.quant",
      "match": "---"
    },
    "dollar_macro_invocation": {
      "name": "entity.name.function.macro.dollar.quant",
      "match": "\\$([A-Za-z_\\-][A-Za-z_\\-0-9]*)"
    },
    "variables_general": {
       "name": "variable.parameter.quant",
       "match": "@[A-Za-z_\\-][A-Za-z_\\-0-9]*"
    },
    "variables_standalone": {
      "name": "variable.parameter.standalone.quant",
      "match": "(?<!\\[)(@[A-Za-z_\\-][A-Za-z_\\-0-9]*)(?!\\>)"
    },
    "curly_blocks": {
      "name": "meta.block.curly.quant",
      "begin": "\\{",
      "end": "\\}",
      "beginCaptures": { "0": { "name": "punctuation.definition.block.begin.quant" } },
      "endCaptures": { "0": { "name": "punctuation.definition.block.end.quant" } },
      "patterns": [
        { "include": "#formatting_code" },
        { "include": "#jump_invocation" },
        { "include": "#macro_invocation" }
      ]
    },
    "formatting_code": {
      "name": "meta.formatting.quant",
      "begin": "(?=\\b(section_break|chapter|part|verse|verse_inline|pp|i|vspace)\\b)",
      "end": "(?=\\})",
      "patterns": [
        {
          "name": "keyword.control.format.quant",
          "match": "\\b(section_break|chapter|part|verse|verse_inline|pp|i|vspace)\\b"
        },
        {
          "name": "punctuation.separator.parameter.quant",
          "match": "/"
        },
        { "include": "#dollar_macro_invocation" },
        { "include": "#variables_general" },
        {
          "name": "string.unquoted.parameter.format.quant",
          "match": "[^\\{\\}\\/\\$\\@]+"
        }
      ]
    },
    "jump_invocation": {
      "name": "meta.jump.quant",
      "begin": "\\b(JUMP)\\b\\s+",
      "end": "(?=\\})",
      "beginCaptures": {
        "1": { "name": "keyword.control.jump.quant" }
      },
      "patterns": [
        {
          "name": "entity.name.label.jump.quant",
          "match": "\\S+"
        }
      ]
    },
    "macro_invocation": {
      "name": "meta.macro.invocation.brace.quant",
      "patterns": [
         { "include": "#dollar_macro_invocation" },
         { "include": "#variables_general" },
        {
          "name": "entity.name.function.macro.brace.quant",
          "match": "[^\\{\\}\\$\\@]+"
        }
      ]
    },
    "control_sequences": {
      "name": "meta.control-sequence.quant",
      "begin": "\\[",
      "end": "\\]",
      "beginCaptures": { "0": { "name": "punctuation.definition.control.begin.quant" } },
      "endCaptures": { "0": { "name": "punctuation.definition.control.end.quant" } },
      "patterns": [
        { "include": "#control_sequence_label" },
        { "include": "#define_keyword" },
        { "include": "#macro_keyword" },
        { "include": "#sticky_macro_keyword" },
        { "include": "#label_keyword" },
        { "include": "#macro_definition_label" },
        { "include": "#label_definition_label" },
        { "include": "#variable_conditionals" },
        { "include": "#weighted_choices" },
        { "include": "#pipe_operator" },
        { "include": "#operators" },
        { "include": "#variables_general" },
        { "include": "#curly_blocks" },
        { "include": "#dollar_macro_invocation" },
        { "include": "#text_inside_control" }
      ]
    },
    "control_sequence_label": {
      "name": "entity.name.tag.control.quant",
      "match": "\\G\\s*\\*([^\\*]+)\\*"
    },
    "define_keyword": {
      "name": "keyword.control.define.quant",
      "match": "\\b(DEFINE)\\b"
    },
    "macro_keyword": {
      "name": "keyword.control.macro.quant",
      "match": "\\b(MACRO)\\b"
    },
    "sticky_macro_keyword": {
      "name": "keyword.control.sticky-macro.quant",
      "match": "\\b(STICKY_MACRO)\\b"
    },
    "label_keyword": {
      "name": "keyword.control.label.quant",
      "match": "\\b(LABEL)\\b"
    },
    "macro_definition_label": {
       "name": "entity.name.function.macro.definition.quant",
       "match": "(?<=\\b(MACRO|STICKY_MACRO)\\s+)(\\S+)"
    },
    "label_definition_label": {
       "name": "entity.name.label.definition.quant",
       "match": "(?<=\\bLABEL\\s+)(\\S+)"
    },
    "pipe_operator": {
      "name": "keyword.operator.pipe.quant",
      "match": "\\|"
    },
    "operators": {
      "patterns": [
        { "name": "keyword.operator.preference.quant", "match": "\\^" },
        { "name": "keyword.operator.always-print.quant", "match": "~" }
      ]
    },
    "weighted_choices": {
      "match": "\\b([0-9]{1,3})(\\>)",
      "captures": {
        "1": { "name": "constant.numeric.weight.quant" },
        "2": { "name": "keyword.operator.weight.quant" }
      }
    },
    "variable_conditionals": {
      "match": "(@[A-Za-z_\\-][A-Za-z_\\-0-9]*)(\\>)",
      "captures": {
        "1": { "name": "variable.parameter.conditional.quant" },
        "2": { "name": "keyword.operator.conditional.quant" }
      }
    },
    "text_inside_control": {
      "name": "string.unquoted.content.quant",
      "match": "[^\\\\\\[\\\\]\\|\\>\\@\\^\\#\\~\\*\\{\\}\\$]+"
    }
  }
}
